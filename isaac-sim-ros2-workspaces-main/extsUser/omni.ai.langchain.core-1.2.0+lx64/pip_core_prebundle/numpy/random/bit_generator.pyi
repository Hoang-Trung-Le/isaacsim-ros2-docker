"""
BitGenerator base class and SeedSequence used to seed the BitGenerators.

SeedSequence is derived from Melissa E. O'Neill's C++11 `std::seed_seq`
implementation, as it has a lot of nice properties that we want.

https://gist.github.com/imneme/540829265469e673d045
http://www.pcg-random.org/posts/developing-a-seed_seq-alternative.html

The MIT License (MIT)

Copyright (c) 2015 Melissa E. O'Neill
Copyright (c) 2019 NumPy Developers

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""
from __future__ import annotations
import numpy.random.bit_generator
import typing
from itertools import cycle
import _abc
import abc
import numpy
import re
import sys
_Shape = typing.Tuple[int, ...]

__all__ = [
    "BitGenerator",
    "SeedSequence"
]


class BitGenerator():
    """
    BitGenerator(seed=None)

    Base Class for generic BitGenerators, which provide a stream
    of random bits based on different algorithms. Must be overridden.

    Parameters
    ----------
    seed : {None, int, array_like[ints], SeedSequence}, optional
        A seed to initialize the `BitGenerator`. If None, then fresh,
        unpredictable entropy will be pulled from the OS. If an ``int`` or
        ``array_like[ints]`` is passed, then it will be passed to
        `~numpy.random.SeedSequence` to derive the initial `BitGenerator` state.
        One may also pass in a `SeedSequence` instance.
        All integer values must be non-negative.

    Attributes
    ----------
    lock : threading.Lock
        Lock instance that is shared so that the same BitGenerator can
        be used in multiple Generators without corrupting the state. Code that
        generates values from a bit generator should hold the bit generator's
        lock.

    See Also
    --------
    SeedSequence
    """
    @staticmethod
    def _benchmark(*args, **kwargs) -> typing.Any: 
        """
        Used in tests
        """
    @staticmethod
    def random_raw(*args, **kwargs) -> typing.Any: 
        """
        random_raw(self, size=None)

        Return randoms as generated by the underlying BitGenerator

        Parameters
        ----------
        size : int or tuple of ints, optional
            Output shape.  If the given shape is, e.g., ``(m, n, k)``, then
            ``m * n * k`` samples are drawn.  Default is None, in which case a
            single value is returned.
        output : bool, optional
            Output values.  Used for performance testing since the generated
            values are not returned.

        Returns
        -------
        out : uint or ndarray
            Drawn samples.

        Notes
        -----
        This method directly exposes the raw underlying pseudo-random
        number generator. All values are returned as unsigned 64-bit
        values irrespective of the number of bits produced by the PRNG.

        See the class docstring for the number of bits returned.
        """
    @staticmethod
    def spawn(*args, **kwargs) -> typing.Any: 
        """
        spawn(n_children)

        Create new independent child bit generators.

        See :ref:`seedsequence-spawn` for additional notes on spawning
        children.  Some bit generators also implement ``jumped``
        as a different approach for creating independent streams.

        .. versionadded:: 1.25.0

        Parameters
        ----------
        n_children : int

        Returns
        -------
        child_bit_generators : list of BitGenerators

        Raises
        ------
        TypeError
            When the underlying SeedSequence does not implement spawning.

        See Also
        --------
        random.Generator.spawn, random.SeedSequence.spawn :
            Equivalent method on the generator and seed sequence.
        """
    _cffi: getset_descriptor # value = <attribute '_cffi' of 'numpy.random.bit_generator.BitGenerator' objects>
    _ctypes: getset_descriptor # value = <attribute '_ctypes' of 'numpy.random.bit_generator.BitGenerator' objects>
    _seed_seq: getset_descriptor # value = <attribute '_seed_seq' of 'numpy.random.bit_generator.BitGenerator' objects>
    capsule: getset_descriptor # value = <attribute 'capsule' of 'numpy.random.bit_generator.BitGenerator' objects>
    cffi: getset_descriptor # value = <attribute 'cffi' of 'numpy.random.bit_generator.BitGenerator' objects>
    ctypes: getset_descriptor # value = <attribute 'ctypes' of 'numpy.random.bit_generator.BitGenerator' objects>
    lock: getset_descriptor # value = <attribute 'lock' of 'numpy.random.bit_generator.BitGenerator' objects>
    seed_seq: getset_descriptor # value = <attribute 'seed_seq' of 'numpy.random.bit_generator.BitGenerator' objects>
    state: getset_descriptor # value = <attribute 'state' of 'numpy.random.bit_generator.BitGenerator' objects>
    pass
class SeedSequence():
    """
    SeedSequence(entropy=None, *, spawn_key=(), pool_size=4)

    SeedSequence mixes sources of entropy in a reproducible way to set the
    initial state for independent and very probably non-overlapping
    BitGenerators.

    Once the SeedSequence is instantiated, you can call the `generate_state`
    method to get an appropriately sized seed. Calling `spawn(n) <spawn>` will
    create ``n`` SeedSequences that can be used to seed independent
    BitGenerators, i.e. for different threads.

    Parameters
    ----------
    entropy : {None, int, sequence[int]}, optional
        The entropy for creating a `SeedSequence`.
        All integer values must be non-negative.
    spawn_key : {(), sequence[int]}, optional
        An additional source of entropy based on the position of this
        `SeedSequence` in the tree of such objects created with the
        `SeedSequence.spawn` method. Typically, only `SeedSequence.spawn` will
        set this, and users will not.
    pool_size : {int}, optional
        Size of the pooled entropy to store. Default is 4 to give a 128-bit
        entropy pool. 8 (for 256 bits) is another reasonable choice if working
        with larger PRNGs, but there is very little to be gained by selecting
        another value.
    n_children_spawned : {int}, optional
        The number of children already spawned. Only pass this if
        reconstructing a `SeedSequence` from a serialized form.

    Notes
    -----

    Best practice for achieving reproducible bit streams is to use
    the default ``None`` for the initial entropy, and then use
    `SeedSequence.entropy` to log/pickle the `entropy` for reproducibility:

    >>> sq1 = np.random.SeedSequence()
    >>> sq1.entropy
    243799254704924441050048792905230269161  # random
    >>> sq2 = np.random.SeedSequence(sq1.entropy)
    >>> np.all(sq1.generate_state(10) == sq2.generate_state(10))
    True
    """
    @staticmethod
    def generate_state(*args, **kwargs) -> typing.Any: 
        """
        generate_state(n_words, dtype=np.uint32)

        Return the requested number of words for PRNG seeding.

        A BitGenerator should call this method in its constructor with
        an appropriate `n_words` parameter to properly seed itself.

        Parameters
        ----------
        n_words : int
        dtype : np.uint32 or np.uint64, optional
            The size of each word. This should only be either `uint32` or
            `uint64`. Strings (`'uint32'`, `'uint64'`) are fine. Note that
            requesting `uint64` will draw twice as many bits as `uint32` for
            the same `n_words`. This is a convenience for `BitGenerator`s that
            express their states as `uint64` arrays.

        Returns
        -------
        state : uint32 or uint64 array, shape=(n_words,)
        """
    @staticmethod
    def spawn(*args, **kwargs) -> typing.Any: 
        """
        spawn(n_children)

        Spawn a number of child `SeedSequence` s by extending the
        `spawn_key`.

        See :ref:`seedsequence-spawn` for additional notes on spawning
        children.

        Parameters
        ----------
        n_children : int

        Returns
        -------
        seqs : list of `SeedSequence` s

        See Also
        --------
        random.Generator.spawn, random.BitGenerator.spawn :
            Equivalent method on the generator and bit generator.
        """
    __pyx_vtable__: typing.Any  # PyCapsule()
    entropy: getset_descriptor # value = <attribute 'entropy' of 'numpy.random.bit_generator.SeedSequence' objects>
    n_children_spawned: getset_descriptor # value = <attribute 'n_children_spawned' of 'numpy.random.bit_generator.SeedSequence' objects>
    pool: getset_descriptor # value = <attribute 'pool' of 'numpy.random.bit_generator.SeedSequence' objects>
    pool_size: getset_descriptor # value = <attribute 'pool_size' of 'numpy.random.bit_generator.SeedSequence' objects>
    spawn_key: getset_descriptor # value = <attribute 'spawn_key' of 'numpy.random.bit_generator.SeedSequence' objects>
    state: getset_descriptor # value = <attribute 'state' of 'numpy.random.bit_generator.SeedSequence' objects>
    pass
class SeedlessSeedSequence():
    """
    A seed sequence for BitGenerators with no need for seed state.

    See Also
    --------
    SeedSequence, ISeedSequence
    """
    @staticmethod
    def generate_state(*args, **kwargs) -> typing.Any: ...
    @staticmethod
    def spawn(*args, **kwargs) -> typing.Any: ...
    pass
class ISpawnableSeedSequence(ISeedSequence, abc.ABC):
    """
    Abstract base class for seed sequences that can spawn.
    """
    __abstractmethods__: frozenset # value = frozenset({'spawn', 'generate_state'})
    _abc_impl: _abc._abc_data
    pass
class ISeedSequence(abc.ABC):
    """
    Abstract base class for seed sequences.

    ``BitGenerator`` implementations should treat any object that adheres to
    this interface as a seed sequence.

    See Also
    --------
    SeedSequence, SeedlessSeedSequence
    """
    __abstractmethods__: frozenset # value = frozenset({'generate_state'})
    _abc_impl: _abc._abc_data
    pass
class SeedlessSequence():
    pass
def Lock(*args, **kwargs) -> typing.Any:
    """
    Create a new lock object. See help(type(threading.Lock())) for
    information about locks.
    """
def __pyx_unpickle_SeedSequence(*args, **kwargs) -> typing.Any:
    pass
def __pyx_unpickle_SeedlessSeedSequence(*args, **kwargs) -> typing.Any:
    pass
def _coerce_to_uint32_array(*args, **kwargs) -> typing.Any:
    """
    Coerce an input to a uint32 array.

       If a `uint32` array, pass it through directly.
       If a non-negative integer, then break it up into `uint32` words, lowest
       bits first.
       If a string starting with "0x", then interpret as a hex integer, as above.
       If a string of decimal digits, interpret as a decimal integer, as above.
       If a sequence of ints or strings, interpret each element as above and
       concatenate.

       Note that the handling of `int64` or `uint64` arrays are not just
       straightforward views as `uint32` arrays. If an element is small enough to
       fit into a `uint32`, then it will only take up one `uint32` element in the
       output. This is to make sure that the interpretation of a sequence of
       integers is the same regardless of numpy's default integer type, which
       differs on different platforms.

       Parameters
       ----------
       x : int, str, sequence of int or str

       Returns
       -------
       seed_array : uint32 array

       Examples
       --------
       >>> import numpy as np
       >>> from numpy.random.bit_generator import _coerce_to_uint32_array
       >>> _coerce_to_uint32_array(12345)
       array([12345], dtype=uint32)
       >>> _coerce_to_uint32_array('12345')
       array([12345], dtype=uint32)
       >>> _coerce_to_uint32_array('0x12345')
       array([74565], dtype=uint32)
       >>> _coerce_to_uint32_array([12345, '67890'])
       array([12345, 67890], dtype=uint32)
       >>> _coerce_to_uint32_array(np.array([12345, 67890], dtype=np.uint32))
       array([12345, 67890], dtype=uint32)
       >>> _coerce_to_uint32_array(np.array([12345, 67890], dtype=np.int64))
       array([12345, 67890], dtype=uint32)
       >>> _coerce_to_uint32_array([12345, 0x10deadbeef, 67890, 0xdeadbeef])
       array([     12345, 3735928559,         16,      67890, 3735928559],
             dtype=uint32)
       >>> _coerce_to_uint32_array(1234567890123456789012345678901234567890)
       array([3460238034, 2898026390, 3235640248, 2697535605,          3],
             dtype=uint32)
       
    """
def _int_to_uint32_array(*args, **kwargs) -> typing.Any:
    pass
DECIMAL_RE: re.Pattern # value = re.compile('[0-9]+')
__all__ = ['SeedSequence', 'BitGenerator']
__test__ = {'_coerce_to_uint32_array (line 81)': ' Coerce an input to a uint32 array.\n\n    If a `uint32` array, pass it through directly.\n    If a non-negative integer, then break it up into `uint32` words, lowest\n    bits first.\n    If a string starting with "0x", then interpret as a hex integer, as above.\n    If a string of decimal digits, interpret as a decimal integer, as above.\n    If a sequence of ints or strings, interpret each element as above and\n    concatenate.\n\n    Note that the handling of `int64` or `uint64` arrays are not just\n    straightforward views as `uint32` arrays. If an element is small enough to\n    fit into a `uint32`, then it will only take up one `uint32` element in the\n    output. This is to make sure that the interpretation of a sequence of\n    integers is the same regardless of numpy\'s default integer type, which\n    differs on different platforms.\n\n    Parameters\n    ----------\n    x : int, str, sequence of int or str\n\n    Returns\n    -------\n    seed_array : uint32 array\n\n    Examples\n    --------\n    >>> import numpy as np\n    >>> from numpy.random.bit_generator import _coerce_to_uint32_array\n    >>> _coerce_to_uint32_array(12345)\n    array([12345], dtype=uint32)\n    >>> _coerce_to_uint32_array(\'12345\')\n    array([12345], dtype=uint32)\n    >>> _coerce_to_uint32_array(\'0x12345\')\n    array([74565], dtype=uint32)\n    >>> _coerce_to_uint32_array([12345, \'67890\'])\n    array([12345, 67890], dtype=uint32)\n    >>> _coerce_to_uint32_array(np.array([12345, 67890], dtype=np.uint32))\n    array([12345, 67890], dtype=uint32)\n    >>> _coerce_to_uint32_array(np.array([12345, 67890], dtype=np.int64))\n    array([12345, 67890], dtype=uint32)\n    >>> _coerce_to_uint32_array([12345, 0x10deadbeef, 67890, 0xdeadbeef])\n    array([     12345, 3735928559,         16,      67890, 3735928559],\n          dtype=uint32)\n    >>> _coerce_to_uint32_array(1234567890123456789012345678901234567890)\n    array([3460238034, 2898026390, 3235640248, 2697535605,          3],\n          dtype=uint32)\n    '}
abc = abc
np = numpy
randbits: method # value = <bound method SystemRandom.getrandbits of <random.SystemRandom object>>
re = re
sys = sys
